//Retrieve Thousand separator from a currency String
String formattedNumber = Decimal.valueOf('12345').setScale(0).format();
String separator = formattedNumber.replaceAll('[0-9]','');
return separator;

//Invocable Method Example
public class AccountInsertAction {
  @InvocableMethod(label='Insert Accounts' description='Inserts the accounts specified and returns the IDs of the new accounts.')
  public static List<ID> insertAccounts(List<Account> accounts) {
    Database.SaveResult[] results = Database.insert(accounts);
    List<ID> accountIds = new List<ID>();
    for (Database.SaveResult result : results) {
      if (result.isSuccess()) {
        accountIds.add(result.getId());
      }
    }
    return accountIds;
  }
}

//Batch Class
global class InjuryRevenueComputationBatch implements Database.Batchable<SObject> {
  
  global Database.QueryLocator start( Database.BatchableContext bc ){ 
     return Database.getQueryLocator([SELECT ID,BillingState,Industry,Total_Employees__c,Est_of_Injuries__c,Est_Annual_Injury_Revenue__c
                               FROM Account]);
  }

  global void execute(Database.BatchableContext bc, List<SObject> lstRecord){
     List<Account> lstAccount = (List<Account>)lstRecord;
  
     InjuryRevenue injuryRev = new InjuryRevenue((List<Account>)lstRecord);
     for(Account account :lstAccount) {
       injuryRev.populate(account);
     }
     update lstAccount;
  }
  
  global void finish(Database.BatchableContext bc){
  }

}
//Schedulable
global class InjuryRevenueSchedulable implements Schedulable {
  
  //----------------------------------------------------------------//
  // Implements Schedulable interface
  //----------------------------------------------------------------//
  global void execute(SchedulableContext context) {
     InjuryRevenueComputationBatch btch = new InjuryRevenueComputationBatch();
     Database.executeBatch(btch,200);
  } 
}