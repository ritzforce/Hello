
//Retrieve Thousand separator from a currency String
String formattedNumber = Decimal.valueOf('12345').setScale(0).format();
String separator = formattedNumber.replaceAll('[0-9]','');
return separator;

//Get all Fields for an Object
Map<String, Schema.SObjectField> fieldMap = Account.sObjectType.getDescribe().fields.getMap();


//Invocable Method Example
public class AccountInsertAction {
  @InvocableMethod(label='Insert Accounts' description='Inserts the accounts specified and returns the IDs of the new accounts.')
  public static List<ID> insertAccounts(List<Account> accounts) {
    Database.SaveResult[] results = Database.insert(accounts);
    List<ID> accountIds = new List<ID>();
    for (Database.SaveResult result : results) {
      if (result.isSuccess()) {
        accountIds.add(result.getId());
      }
    }
    return accountIds;
  }
}

//Batch Class
global class InjuryRevenueComputationBatch implements Database.Batchable<SObject> {
  
  global Database.QueryLocator start( Database.BatchableContext bc ){ 
     return Database.getQueryLocator([SELECT ID,BillingState,Industry,Total_Employees__c,Est_of_Injuries__c,Est_Annual_Injury_Revenue__c
                               FROM Account]);
  }

  global void execute(Database.BatchableContext bc, List<SObject> lstRecord){
     List<Account> lstAccount = (List<Account>)lstRecord;
  
     InjuryRevenue injuryRev = new InjuryRevenue((List<Account>)lstRecord);
     for(Account account :lstAccount) {
       injuryRev.populate(account);
     }
     update lstAccount;
  }
  
  global void finish(Database.BatchableContext bc){
  }

}
//Schedulable
global class InjuryRevenueSchedulable implements Schedulable {
  
  //----------------------------------------------------------------//
  // Implements Schedulable interface
  //----------------------------------------------------------------//
  global void execute(SchedulableContext context) {
     InjuryRevenueComputationBatch btch = new InjuryRevenueComputationBatch();
     Database.executeBatch(btch,200);
  } 
}

scheduledMerge m = new scheduledMerge();
String sch = '20 30 8 10 2 ?';
String jobID = system.schedule('Merge Job', sch, m);




public class CSVFileUtil {
	//from https://developer.salesforce.com/page/Code_Samples#Parse_a_CSV_with_APEX
    public static List<List<String>> parseCSV(Blob csvFileBody,Boolean skipHeaders) {
        if(csvFileBody == null) {
            ApexPages.Message errorMessage = new ApexPages.Message(ApexPages.severity.ERROR, AppConstants.FILE_MISSING);
            ApexPages.addMessage(errorMessage);
            return null;
        }
        
        String contents = csvFileBody.toString();
        
        List<List<String>> allFields = new List<List<String>>();

        // replace instances where a double quote begins a field containing a comma
        // in this case you get a double quote followed by a doubled double quote
        // do this for beginning and end of a field
        contents = contents.replaceAll(',"""',',"DBLQT').replaceall('""",','DBLQT",');
        // now replace all remaining double quotes - we do this so that we can reconstruct
        // fields with commas inside assuming they begin and end with a double quote
        contents = contents.replaceAll('""','DBLQT');
	//windows case - replace all carriage + new line character to just new line character
	contents = contents.replaceAll('\r\n','\n');
        //now replace all return char to new line character
        contents = contents.replaceAll('\r','\n');
        // we are not attempting to handle fields with a newline inside of them
        // so, split on newline to get the spreadsheet rows
        List<String> lines = new List<String>();
        try {
            lines = contents.split('\n');
        } catch (System.ListException e) {
            System.debug('Limits exceeded?' + e.getMessage());
        }
        Integer num = 0;
        for(String line : lines) {
            // check for blank CSV lines (only commas)
            if (line.replaceAll(',','').trim().length() == 0) break;
            
            List<String> fields = line.split(',');  
            List<String> cleanFields = new List<String>();
            String compositeField;
            Boolean makeCompositeField = false;
            for(String field : fields) {
                if (field.startsWith('"') && field.endsWith('"')) {
                    cleanFields.add(field.replaceAll('DBLQT','"').trim());
                } else if (field.startsWith('"')) {
                    makeCompositeField = true;
                    compositeField = field;
                } else if (field.endsWith('"')) {
                    compositeField += ',' + field;
                    cleanFields.add(compositeField.replaceAll('DBLQT','"').trim());
                    makeCompositeField = false;
                } else if (makeCompositeField) {
                    compositeField +=  ',' + field;
                } else {
                    cleanFields.add(field.replaceAll('DBLQT','"').trim());
                }
            }
            
            allFields.add(cleanFields);
        }
        if (skipHeaders) allFields.remove(0);
        return allFields;       
    }
}
