1. Salesforce Classic is the current Look and feel
2. Salesforce Lightning is the new look and feel, using the Salesforce Lightning Design system (which is based on Bootstrap)

Not supported in Lightning
URL buttons, inline editing, and customizable tabs. 

Rolling out Lightning Experience
Lightning Experience auto-enables  for any standard profile users.
Create a permission set with the Lightning Experience permission. 
Apply the permission set directly to the pilot users, then enable Lightning Experience.

Salesforce Classic is page centric relying on server to create a new page, when something interesting happens
The new view is app centric which uses js to dynamically modify the page, when something interesting happens

Using Visualforce pages in Lightning Experience
Visualforce pages are embedded in an HTML iframe that’s displayed inside the Lightning Experience app.

you can integrate Canvas apps in Lightning Components
Development Mode for Visualforce is only available in Salesforce Classic

//Detect is the VF page running in Lightning or Salesforce one
function isLightningExperienceOrSalesforce1() {
    return((typeof sforce != 'undefined') && sforce && (!!sforce.one));
}

SOQL Query, not preferred approach , but ok
SELECT UserPreferencesLightningExperiencePreferred FROM User WHERE Id = 'CurrentUserId'

sforce.one.navigateToSObject("001U000000727PZ"); //Navigate to a recordId

Static URLs can be challenge in Lightning
link = '/' + accountId + '/e';
use the inbuilt {!URLFOR($Action.Contact.Edit,recordId)};
use sforce.one.navigateToSObject();


<apex:page standardController="Account">

    <!-- Base styles -->
    <apex:stylesheet value="{!URLFOR($Resource.AppStyles, 'app-styles.css')}" />
    
    <!-- Lightning Desktop extra styles -->
    <script type="text/javascript">
      if( (typeof sforce != 'undefined') && sforce && (!!sforce.one) ) }
        link = document.createElement( "link" );
        link.href = "{! URLFOR($Resource.AppStyles, 'lightning-styling.css') }";
        link.type = "text/css";
        link.rel = "stylesheet";
        link.media = "all";
        document.getElementsByTagName("head")[0].appendChild(link);
      }
    </script>

    <!-- Rest of your page -->
    
</apex:page>

Component Reference
https://ritz123-dev-ed.lightning.force.com/auradocs/reference.app

A .app resource can’t be included in Salesforce1 but a .cmp resource can. 
You can embed your components in a .app resource to preview it as a standalone app outside of Salesforce1.

Attributes can be added to
1) components, 
2) Application
3) Events
4) Interfaces
The attribute values can be used both client side and server side

Handling onclick events
<input type="button" value="Hybrid HTML Button" onclick="{!c.handleClick}"/>
<ui:button label="Framework Button" press="{!c.handleClick}"/>

handleClick : function(event,component) {
  //get Source is found, the event is being fired from a aura component
  if(event.getSource()) {
    var target = event.getSource();
	cmp.set("v.text",target.get("v.label"));
  }
  else {
    //Event fired from a html component that is input type button
    var target = event.target.value;
	cmp.set("v.text",target);
  }
}

Application Event or Component Event